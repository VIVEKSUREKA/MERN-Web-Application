{"ast":null,"code":"var _jsxFileName = \"C:\\\\CV\\\\MERN App_photo manager\\\\MERN-Web-App\\\\client\\\\src\\\\components\\\\Form\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport FileBase from 'react-file-base64';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport useStyles from './styles';\nimport { createPost, updatePost } from '../../actions/posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = _ref => {\n  _s();\n\n  var _user$result3;\n\n  let {\n    currentId,\n    setCurrentId\n  } = _ref;\n  const [postData, setPostData] = useState({\n    title: '',\n    message: '',\n    tags: '',\n    selectedFile: ''\n  });\n  const post = useSelector(state => currentId ? state.posts.find(p => p._id === currentId) : null);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (currentId) {\n      var _user$result;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }));\n      clear();\n    } else {\n      var _user$result2;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n      clear();\n    }\n  };\n\n  const clear = () => {\n    setCurrentId(null);\n    setPostData({\n      title: '',\n      message: '',\n      tags: '',\n      selectedFile: ''\n    });\n  };\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name)) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        align: \"center\",\n        children: \"Please Sign In to create your own memories and like other's memories.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [currentId ? 'Editing' : 'Creating', \" a Memory\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"message\",\n        variant: \"outlined\",\n        label: \"Message\",\n        fullWidth: true,\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"Tags\",\n        fullWidth: true,\n        value: postData.tags,\n        onChange: e => setPostData({ ...postData,\n          tags: e.target.value.split(',')\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.fileInput,\n        children: [\" \", /*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"file\",\n          multiple: false,\n          onDone: _ref2 => {\n            let {\n              base64\n            } = _ref2;\n            return setPostData({ ...postData,\n              selectedFile: base64\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 53\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Form, \"mfH2gxrWACehG8dAMYx8eUx/SP4=\", false, function () {\n  return [useSelector, useStyles, useDispatch];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/CV/MERN App_photo manager/MERN-Web-App/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","FileBase","useDispatch","useSelector","useStyles","createPost","updatePost","Form","currentId","setCurrentId","postData","setPostData","title","message","tags","selectedFile","post","state","posts","find","p","_id","classes","dispatch","user","JSON","parse","localStorage","getItem","handleSubmit","e","preventDefault","name","result","clear","paper","root","form","target","value","split","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport { TextField,Button,Typography, Paper } from '@material-ui/core';\r\nimport FileBase from 'react-file-base64';\r\nimport {useDispatch} from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport useStyles from './styles';\r\nimport {createPost,updatePost} from '../../actions/posts';\r\n\r\nconst Form = ({currentId , setCurrentId})=>{\r\n\r\n    const [postData, setPostData] = useState({title : '', message : '', tags : '',selectedFile : ''});\r\n    const post = useSelector((state) => currentId ?state.posts.find((p)=>p._id===currentId): null);\r\n\r\n    const classes =useStyles();\r\n    const dispatch = useDispatch();\r\n    const user = JSON.parse(localStorage.getItem('profile'));\r\n\r\n    useEffect(( )=> {\r\n        if(post) setPostData(post);\r\n    },[post]);\r\n\r\n    const handleSubmit = async (e)=>{\r\n        e.preventDefault();\r\n        if(currentId){\r\n            dispatch(updatePost(currentId,{...postData, name :user?.result?.name}));\r\n            clear();\r\n        }else{\r\n            dispatch(createPost({...postData,name : user?.result?.name}));\r\n            clear();\r\n        }\r\n        \r\n    }\r\n\r\n    const clear = () => {\r\n        setCurrentId(null);\r\n        setPostData({title : '', message : '', tags : '',selectedFile : ''});\r\n    }\r\n\r\n    if(!user?.result?.name){\r\n        return (\r\n            <Paper className ={classes.paper}>\r\n                <Typography variant=\"h6\" align=\"center\">\r\n                    Please Sign In to create your own memories and like other's memories.\r\n                </Typography>\r\n            </Paper>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <form autoComplete='off' noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n                <Typography variant= \"h6\" >{currentId ? 'Editing' : 'Creating'} a Memory</Typography>\r\n                {/* <TextField  name=\"creator\" variant=\"outlined\"  label= \"Creator\"  fullWidth  value={postData.creator}  onChange={(e) => setPostData({...postData, creator: e.target.value})} /> */}\r\n                <TextField  name=\"title\" variant=\"outlined\"  label= \"Title\"  fullWidth  value={postData.title}  onChange={(e) => setPostData({...postData, title: e.target.value})} />\r\n                <TextField  name=\"message\" variant=\"outlined\"  label= \"Message\"  fullWidth  value={postData.message}  onChange={(e) => setPostData({...postData, message: e.target.value})} />\r\n                <TextField  name=\"tags\" variant=\"outlined\"  label= \"Tags\"  fullWidth  value={postData.tags}  onChange={(e) => setPostData({...postData, tags: e.target.value.split(',')})} />\r\n                <div className={classes.fileInput}> <FileBase type = \"file\" multiple = {false} onDone = {({base64}) => setPostData({...postData,selectedFile: base64}) }/> </div>\r\n                <Button className ={classes.buttonSubmit} variant = \"contained\" color = \"primary\" size = \"large\" type = \"submit\" fullWidth>Submit</Button>\r\n                <Button variant = \"contained\" color = \"secondary\" size = \"small\" onClick = { clear} fullWidth>Clear</Button>\r\n            </form>\r\n        </Paper>\r\n        \r\n    );\r\n    \r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}